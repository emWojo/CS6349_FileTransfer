"""
# Test User input reading
usage = "Usage:\n\thelp\n\tupload \"[file]\"\n\tdownload \"[file]\"\n\texit"
print("Program Started")
print(usage)
fstore = "clientStore\\"
f = None
while True:
    inp = input("\n>> ")
    inp = inp.split()
    if inp[0] == "help":
        print(usage)
    elif inp[0] == "upload":
        if len(inp[1]) > 58:
            print("File name cannot be > 58 bytes in length")
            continue
        try:
            f = open(fstore+inp[1], 'rb')
        except IOError as e:
            print(e)
            continue
        contents = f.read()
        print("Upload",fstore+inp[1],"Starting...")
        print(len(contents))
    elif inp[0] == "download":
        print("Download",fstore+inp[1],"Starting...")
    elif inp[0] == "exit":
        print("Program Exiting...")
        exit(0)
    else:
        print("Error: Unrecognized command")
        print(usage)
    
"""

"""
# Test Files Byte Transfer
import math
with open('clientStore\\test.docx', 'rb') as f:
    contents = f.read()
    print(len(contents))

f = open("serverStore\\test.docx", "wb")
while len(contents) > 0:
    bytes = contents[:64]
    contents = contents[64:]
    
    bytes = bytes + b'\x00' * (64-len(bytes))
    if len(contents) == 0:
        bytes = bytes.strip(b"\x00")
    
    f.write(bytes)
f.close()
"""
"""
with open('clientStore\\test.docx', 'rb') as f:
    contents = f.read()
    print(len(contents) > 1703910)

with open('clientStore\\test.txt', 'rb') as f:
    contents = f.read()
    print(len(contents) > 1703910)

with open('clientStore\\test.jpg', 'rb') as f:
    contents = f.read()
    print(len(contents) > 1703910)

with open('clientStore\\test.pdf', 'rb') as f:
    contents = f.read()
    print(len(contents) > 1703910)

with open('clientStore\\ex.py', 'rb') as f:
    contents = f.read()
    print(len(contents) > 1703910)

"""
"""
import os
import binascii
import hashlib
import secrets
import math

primes = {
	1536: { 
	"p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,
	"g": 2
	},
	2048: {
	"p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,
	"g": 2
	},
	3072: {
	"p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,
	"g": 2
	},
	4096: {
	"p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,
	"g": 2
	},
	6144: {
	"p": 0x
	"g": 2
	},
	8192: {
	"p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DBE115974A3926F12FEE5E438777CB6A932DF8CD8BEC4D073B931BA3BC832B68D9DD300741FA7BF8AFC47ED2576F6936BA424663AAB639C5AE4F5683423B4742BF1C978238F16CBE39D652DE3FDB8BEFC848AD922222E04A4037C0713EB57A81A23F0C73473FC646CEA306B4BCBC8862F8385DDFA9D4B7FA2C087E879683303ED5BDD3A062B3CF5B3A278A66D2A13F83F44F82DDF310EE074AB6A364597E899A0255DC164F31CC50846851DF9AB48195DED7EA1B1D510BD7EE74D73FAF36BC31ECFA268359046F4EB879F924009438B481C6CD7889A002ED5EE382BC9190DA6FC026E479558E4475677E9AA9E3050E2765694DFC81F56E880B96E7160C980DD98EDD3DFFFFFFFFFFFFFFFFF,
	"g": 2
	}
}
p = primes[2048]["p"]
g = primes[2048]["g"]

a = int(binascii.hexlify(secrets.token_bytes(32)), base=16)
b = int(binascii.hexlify(secrets.token_bytes(32)), base=16)

pubA = pow(g,a,p)
pubB = pow(g,b,p)

safePrime = False
pub = pubA
if 2 <= pub and pub <= p - 2:
			if pow(pub, (p - 1) // 2, p) == 1:
				safePrime = True

sA = pow(pubB, a, p)
sB = pow(pubA, b, p)

print(sA == sB)
arr = [pubA, pubB, sA]
for i in arr:
    len = math.ceil(i.bit_length()/8)
    print(len)
    i_byte = i.to_bytes(len, 'big')
    print(i_byte)
    print(i_byte[:64])
    print(i_byte[64:128])
    print(i_byte[128:192])
    #print(len(bytes(str(i), 'utf-8')))
    #print(bytes(str(i), 'utf-8'))

p = primes[3072]["p"]
g = primes[3072]["g"]

a = int(binascii.hexlify(secrets.token_bytes(32)), base=16)
b = int(binascii.hexlify(secrets.token_bytes(32)), base=16)
pubA = pow(g,a,p)
pubB = pow(g,b,p)
sA = pow(pubB, a, p)
sB = pow(pubA, b, p)
rr = [pubA, pubB, sA]
for i in arr:
    len = math.ceil(i.bit_length()/8)
    print(len)
    i_byte = i.to_bytes(len, 'big')
    print(i_byte)
    #print(i_byte[:64])
    #print(i_byte[64:128])
    #print(i_byte[128:192])



import time
import random
import rsa
with open('keys/pubkey.pem', 'rb') as file:
    pubKey = rsa.PublicKey.load_pkcs1(file.read())

with open('keys/privkey.pem', 'rb') as file:
    privKey = rsa.PrivateKey.load_pkcs1(file.read())

def sign_sha256(msg, key):
    return rsa.sign(msg, key, 'SHA-256')

# verify signed mssage msg with signature using key and sha256
def verify_sha256(msg, signature, key):
    try:
        return rsa.verify(msg, signature, key) == 'SHA-256'
    except:
        return False


now = int(time.time())
nonce = secrets.token_bytes(64)
print(now)
print(nonce)
len = math.ceil(now.bit_length()/8)
print(len)
date_time = now.to_bytes(len, 'big')
print(date_time)
msg = date_time+nonce
signed = sign_sha256(msg, privKey)
#print(len(signed))
print(signed[2:])
ver = verify_sha256(msg, signed, pubKey)
#print(ver)

rt = int.from_bytes(msg[:4], 'big')
rn = int.from_bytes(msg[4:68], 'big')
#print(rt)
#print(rn)
"""
import rsa
with open('keys/pubkey.pem', 'rb') as file:
    pubKey = rsa.PublicKey.load_pkcs1(file.read())

with open('keys/privkey.pem', 'rb') as file:
    privKey = rsa.PrivateKey.load_pkcs1(file.read())
import util
p,g = util.get_dh_prime(2048)
sec,pub = util.get_dh_secAndpub(p, g)
pub_byte = pub.to_bytes(256, 'big')
msg = util.signChalMsg(pub_byte, privKey)
print(pub_byte)
print(msg)
print(pub_byte+msg[:16])